[

{
"id": "-2017-09-01-Js",
"title": "JavaScript Recap",
"author": "Anshuman",
"tags": ["JavaScript"],
"url": "/2017/09/01/Js/",
"date": "2017-09-01",
"content": "JavaScript Quick RevisionData Types and Variables//Data Types//Number ,String,Array,Objects,Boolean//Declaration of variables(identifier) of different data typesexamples var x=23;//syntax for declaration var y= new Array(); var name=\"rajesh\" var y=[\"car\",\"wheel\",\"232\"]; var status=true; var x='c'; var obj=new Object(); var t=new Array(); var obj1={\"name\":\"rohan\",age:24};Boolean(2&lt;10);//returns truetrue ,false---boolean//-------------------------------------------------------//finding data type of a variabletypeof x;// returns String  //---------------------------------------------KeywordsThere are certain reserved words which can’t be used as identifiers.They have pre defined meanings for example for,function,Object,Array,case,switch,—these are KeywordsValues(variable and literals)//values are of two types variables and literalsvariable----their value changesex--var x=23;x=24;//x is variableliterals-----values of literals are constantvar x=\"himalayas\",x=27.6,x=Math.PI//\"himalayas\",27,27.6,Math.PI----these are literals and x is variableOperators2*32/34+45-1var=x;x=2x==2;//true2==4//falsex||YX &amp;&amp; Y!x//assignmmentx=y;y=23;Expressions and Statements//Expressions//part of a statement which has got a complete meaning//values and operators are used to make expressionsw=23+tv=u + a*t//Statements;//empty statement// simple statements//expressions followed by semicolon(;)---tells computer to take a meaningful action or evaluation//these can be a group of expressions inside {}examplesn=m+4;k=23*e+x;//compound statement     { var x=24;      var y=35;     var z=x+y;     }{     {          var x=23;            var y=29;     }console.log(\"hello world\");}  Flow of controlsa)Conditionsi) if else statement     if (condition){                                                                                                                                                                                                                                                                                                   expression1;               exp2;               exp3;               ...               ...               }       else if (condition){exp block}       .       .       .       else {exp block} example  :- if (x==2){console.log(\"value of input is 2\");}ii)switch case statementswitch(expression) {    case n:        code block        break;    case n:        code block        break;    default:        default code block}exampleswitch (new Date().getDay()) {    case 0:        day = \"Sunday\";        break;    case 1:        day = \"Monday\";        break;    case 2:        day = \"Tuesday\";        break;    case 3:        day = \"Wednesday\";        break;    case 4:        day = \"Thursday\";        break;    case 5:        day = \"Friday\";        break;    case 6:        day = \"Saturday\";        break;}b)LOOPSi)for loopfor (statement 1; statement 2; statement 3) {    code block to be executed}example/////////////////////////////////for (i = 0; i &lt; 5; i++) {    console.log(i);}////////////////////////////////var i = 2;var len = cars.length;var text = \"\";for (; i &lt; len; i++) {    text += cars[i] + \"\";}////////////////////////////////var i = 0;var len = cars.length;for (; i &lt; len; ) {    text += cars[i] + \"\";    i++;}///////////////////////////////////for in loopvar person = {fname:\"John\", lname:\"Doe\", age:25};var text = \"\";var x;for (x in person) {    text += person[x];}//////////////////////////////////ii)While loopsyntaxwhile (condition) {    code block to be executed}example/////////////////////////////////while (i &lt; 10) {    text += \"The number is \" + i;    i++;}////////////////////////////////iii)Do While loopSyntaxdo {    code block to be executed}while (condition);//////////////////////////////exampledo {    text += \"The number is \" + i;    i++;}while (i &lt; 10);iv)Break Statementfor (i = 0; i &lt; 10; i++) {    if (i == 3) break;    text += \"The number is \" + i + \"\";}////////////////////////////////////v)Continue Statementfor (i = 0; i &lt;= 10; i++) {    if (i == 3) continue;    text += \"The number is \" + i + \"\";}/////////////////////////////////////Functionfunction functionName(parameters) {  code to be executed}//////////////////////////////////////////var func_name = function(arg1,arg2,...){exp1;exp2.......}///////////////////////////////////////orfunction func_name(arg1,...){block of code}examplefunction myFunction(a, b) {    return a * b;}//////////////////////////////////var x = function (a, b) {return a * b};////////////////////////////////////////var x = function (a, b) {return a * b};var z = x(4, 3);/////////////////////////////////////////var myFunction = new Function(\"a\", \"b\", \"return a * b\");var x = myFunction(4, 3);//////////////////////////////////////////////var myFunction = function (a, b) {return a * b};var x = myFunction(4, 3);////////////////////////////////////////////self invoking function(function () {    var x = \"Hello!!\";      // I will invoke myself})();////////////////////////////////////////    i)recurssionfunction  factorial(num){    // If the number is less than 0, reject it.    if (num &lt; 0) {        return -1;    }    // If the number is 0, its factorial is 1.    else if (num == 0) {        return 1;    }    // Otherwise, call this recursive procedure again.    else {        return (num * factorial(num - 1));    }}//////////////////////////////////////////////////////ii)unlimited argumentsfunction manyArgs() {  for (var i = 0; i &lt; arguments.length; ++i)    alert(arguments[i]);}Data Structure--------------------------------------------------------------                   4.Data Structure (Arrays and JSON)--------------------------------------------------------------//collection of data elements are called as data structureJSON-javascript object notationJSON object{\"firstName\":\"John\", \"lastName\":\"Doe\"}JSON Array{\"employees\":[    {\"firstName\":\"John\", \"lastName\":\"Doe\"},    {\"firstName\":\"Anna\", \"lastName\":\"Smith\"},    {\"firstName\":\"Peter\", \"lastName\":\"Jones\"}]}text to JSONvar text = '{ \"employees\" : [' +'{ \"firstName\":\"John\" , \"lastName\":\"Doe\" },' +'{ \"firstName\":\"Anna\" , \"lastName\":\"Smith\" },' +'{ \"firstName\":\"Peter\" , \"lastName\":\"Jones\" } ]}';var obj = JSON.parse(text);///////////////////////////////////////////////////////////ArraySyntax:var array-name = [item1, item2, ...];     Example:var cars = [\"Saab\", \"Volvo\", \"BMW\"];Examplevar cars = new Array(\"Saab\", \"Volvo\", \"BMW\");//accessing arraysvar name = cars[0];cars[0] = \"Opel\";var fruits = [\"Banana\", \"Orange\", \"Apple\", \"Mango\"];fruits.length;fruits.sort();//////////////////////////////////////////////////////////////var fruits = [\"Banana\", \"Orange\", \"Apple\", \"Mango\"];document.getElementById(\"demo\").innerHTML = fruits.valueOf();var fruits = [\"Banana\", \"Orange\", \"Apple\", \"Mango\"];document.getElementById(\"demo\").innerHTML = fruits.toString();&lt;p id=\"demo\"&gt;&lt;/p&gt;&lt;script&gt;var fruits = [\"Banana\", \"Orange\",\"Apple\", \"Mango\"];document.getElementById(\"demo\").innerHTML = fruits.join(\" * \");&lt;/script&gt;var fruits = [\"Banana\", \"Orange\", \"Apple\", \"Mango\"];fruits.pop();              // Removes the last element (\"Mango\") from fruitsvar fruits = [\"Banana\", \"Orange\", \"Apple\", \"Mango\"];fruits.push(\"Kiwi\");       //  Adds a new element (\"Kiwi\") to fruitsvar fruits = [\"Banana\", \"Orange\", \"Apple\", \"Mango\"];fruits.shift();            // Removes the first element \"Banana\" from fruitsvar fruits = [\"Banana\", \"Orange\", \"Apple\", \"Mango\"];fruits.unshift(\"Lemon\");    // Adds a new element \"Lemon\" to fruitsvar fruits = [\"Banana\", \"Orange\", \"Apple\", \"Mango\"];fruits[0] = \"Kiwi\";        // Changes the first element of fruits to \"Kiwi\"var fruits = [\"Banana\", \"Orange\", \"Apple\", \"Mango\"];fruits[fruits.length] = \"Kiwi\";          // Appends \"Kiwi\" to fruitvar fruits = [\"Banana\", \"Orange\", \"Apple\", \"Mango\"];delete fruits[0];           // Changes the first element in fruits to undefinedvar fruits = [\"Banana\", \"Orange\", \"Apple\", \"Mango\"];fruits.splice(2, 0, \"Lemon\", \"Kiwi\");var fruits = [\"Banana\", \"Orange\", \"Apple\", \"Mango\"];fruits.splice(0,1);        // Removes the first element of fruitsvar fruits = [\"Banana\", \"Orange\", \"Apple\", \"Mango\"];fruits.sort();            // Sorts the elements of fruitsvar fruits = [\"Banana\", \"Orange\", \"Apple\", \"Mango\"];fruits.sort();            // Sorts the elements of fruitsfruits.reverse();         // Reverses the order of the elementsvar points = [40, 100, 1, 5, 25, 10];points.sort(function(a, b){return a-b});var points = [40, 100, 1, 5, 25, 10];points.sort(function(a, b){return b-a});function(a, b){return a-b}var points = [40, 100, 1, 5, 25, 10];points.sort(function(a, b){return b-a});// now points[0] contains the highest valuevar points = [40, 100, 1, 5, 25, 10];points.sort(function(a, b){return a-b});// now points[0] contains the lowest valuevar myGirls = [\"Cecilie\", \"Lone\"];var myBoys = [\"Emil\", \"Tobias\",\"Linus\"];var myChildren = myGirls.concat(myBoys);     // Concatenates (joins) myGirls and myBoysvar arr1 = [\"Cecilie\", \"Lone\"];var arr2 = [\"Emil\", \"Tobias\",\"Linus\"];var arr3 = [\"Robin\", \"Morgan\"];var myChildren = arr1.concat(arr2, arr3);     // Concatenates arr1 with arr2 and arr3var fruits = [\"Banana\", \"Orange\", \"Lemon\", \"Apple\", \"Mango\"];var citrus = fruits.slice(1,3);Objects and Class--------------------------------------------------------------                      5.Objects and Class--------------------------------------------------------------var x=new Object();var car={\"color\":\"red\",\"power\":\"80 hp\",\"max-speed\":130}var person = {firstName:\"John\", lastName:\"Doe\", age:50, eyeColor:\"blue\"};//////////////////////////////////////////////////////////////////////////// Object Constructorfunction Graph() {  this.vertices = [];  this.edges = [];}Graph.prototype = {  addVertex: function(v){    this.vertices.push(v);  }Graph.prototype.startPoint=[0,0];};var g = new Graph();/////////////////////////////////////////////////////////////////////////var person = {    firstName:\"John\",    lastName:\"Doe\",    age:50,    eyeColor:\"blue\",    changeName:function(name){this.firstName=name}}person.lastName;person[\"lastName\"];delete person.age;//////////////////////////////Object Methodsfunction person(firstname, lastname, age, eyecolor) {    this.firstname = firstname;    this.lastname = lastname;    this.age = age;    this.eyecolor = eyecolor;    this.changeName = function (name) {        this.lastname = name;    }}myMother.changeName(\"Doe\");//////////////////////////////////using prototype//the constructor functionfunction person(first, last, age, eyecolor) {    this.firstName = first;    this.lastName = last;    this.age = age;    this.eyeColor = eyecolor;}person.prototype.name = function() {        return this.firstName + \" \" + this.lastName;};person.prototype.nationality = \"English\";////////////////////////////////////////////Inheritance (single and multiple inheritance can be created with the class.call(this) method inside the constructor//////////////////////////////////////////////////////////////// I am the Person class.function Person( name ){this.name = name;}// Define the class methods.Person.prototype = {// I swing this person in the trees.swing: function(){return( \"Ouch! My hands!\" );},// I walk this person.walk: function(){return( \"Walk this way!\" );}};// -------------------------------------------------- //// -------------------------------------------------- //// I am the Monkey class.function Monkey( isFriendly ){this.isFriendly = isFriendly;}// Define the class methods.Monkey.prototype = {// I swing this person in the trees.swing: function(){return( \"Weeeeee! I feel so free!\" );},// I walk this monkey.walk: function(){return( \"Ouch! My hands!\" );}};// -------------------------------------------------- //// -------------------------------------------------- //// I am the Ben class.function Ben(){// Call the super constructors of the base classes.Person.call( this, \"Ben\" );Monkey.call( this, true );}// Define the class methods.Ben.prototype = {// I give people a high-five!highFive: function( person ){return( \"Hey \" + person.name + \", high five!\" );},// I walk this Ben. While I inherit mostly from Monkey,// I can actually walk like a Person; as such, we need// to explicitly call the more appropriate super method.walk: function(){return(Person.prototype.walk.call( this ));}};// The Ben class exnteds both the Person and Monkey class// (or so I'm told by my friends). Here, we are going to use// jQuery's .extend() method to augment the existing Ben// prototype. Notice that Ben comes LAST! The order of// inheritance matters here as the class methods will// overwrite each other.Ben.prototype = $.extend({},Person.prototype,Monkey.prototype,Ben.prototype);// -------------------------------------------------- //// -------------------------------------------------- //// -------------------------------------------------- //// -------------------------------------------------- //// Create a new Ben object.var ben = new Ben();// Try to walk and swing.console.log( \"Walking:\", ben.walk() );console.log( \"Swinging:\", ben.swing() );// Try to give a high-five to someone.console.log(\"High-five:\",ben.highFive( new Person( \"Jill\" ) ));//////////////////////////////////////////////////////////////function Employee() {  this.name = \"\";  this.dept = \"general\";}function Manager() {  Employee.call(this);  this.reports = [];}Manager.prototype = Object.create(Employee.prototype);function WorkerBee() {  Employee.call(this);  this.projects = [];}WorkerBee.prototype = Object.create(Employee.prototype);function SalesPerson() {   WorkerBee.call(this);   this.dept = \"sales\";   this.quota = 100;}SalesPerson.prototype = Object.create(WorkerBee.prototype);function Engineer() {   WorkerBee.call(this);   this.dept = \"engineering\";   this.machine = \"\";}Engineer.prototype = Object.create(WorkerBee.prototype);//////////////////////////////////////////////////////////// inheritence with constructor inputsfunction Engineer (name, projs, mach) {  this.base = WorkerBee;  this.base(name, \"engineering\", projs);  this.machine = mach || \"\";}    /////////////////////////////////////////////////////////////var a = {a: 1};var b = Object.create(a);Exception Handling--------------------------------------------------------------                    6.Exception Handling--------------------------------------------------------------try {    Block of code to try}catch(err) {    Block of code to handle errors}finally {    Block of code to be executed regardless of the try / catch result}## Files--------------------------------------------------------------                      7.Files--------------------------------------------------------------as the javascript works inside the browser files cann't be handles with it.with the File HTML elementfiles can be uploaded.local files can be used with the node.js packageStandard Library--------------------------------------------------------------                      8.Standard Library--------------------------------------------------------------Standrad library in js containsglobal objetcswindowdocumentArrayObjectFunctionDateStringModules-------------------------------------------------------------                            9.Modules and Packages--------------------------------------------------------------all class function and variable declaration to be written in a file with \" .js \" extension and loaded in the html filefor access&lt;html&gt;     &lt;head&gt;          &lt;script src=\"/&lt;dirname&gt;/&lt;filename&gt;.js\"&gt;&lt;/script&gt;     &lt;/head&gt;&lt;body&gt;&lt;script&gt;// all global functions and variable inside &lt;filename&gt;.js can be used here&lt;/script&gt;&lt;/body&gt;&lt;/html&gt;//in node js creatig a module//create a file  and add an object and then export//------file path---/var router = {name:\"fukan\"};module.exports = router;//importing it in another filevar obj =require(\"&lt;filepath&gt;/&lt;filename&gt;\");console.log(obj.name)Special Features--------------------------------------------------------------                      10.Special Features--------------------------------------------------------------String methodsvar str = \"Please locate where 'locate' occurs!\";var pos = str.indexOf(\"locate\");x = true;Number(x);        // returns 1x = false;    Number(x);        // returns 0x = new Date();Number(x);        // returns 1404568027739x = \"10\"Number(x);        // returns 10x = \"10 20\"Number(x);        // returns NaNNumbersvar x = 123;x.toString();            // returns 123 from variable x(123).toString();        // returns 123 from literal 123(100 + 23).toString();   // returns 123 from expression 100 + 23var x = 9.656;x.toExponential(2);     // returns 9.66e+0x.toExponential(4);     // returns 9.6560e+0x.toExponential(6);     // returns 9.656000e+0var x = 9.656;x.toFixed(0);           // returns 10x.toFixed(2);           // returns 9.66x.toFixed(4);           // returns 9.6560x.toFixed(6);           // returns 9.656000var x = 9.656;x.toPrecision();        // returns 9.656x.toPrecision(2);       // returns 9.7x.toPrecision(4);       // returns 9.656x.toPrecision(6);       // returns 9.65600x = true;Number(x);        // returns 1x = false;    Number(x);        // returns 0x = new Date();Number(x);        // returns 1404568027739x = \"10\"Number(x);        // returns 10x = \"10 20\"Number(x);        // returns NaNDate------------------------Date Get MethodsGet methods are used for getting a part of a date. Here are the most common (alphabetically):Method     DescriptiongetDate()     Get the day as a number (1-31)getDay()     Get the weekday as a number (0-6)getFullYear()     Get the four digit year (yyyy)getHours()     Get the hour (0-23)getMilliseconds()     Get the milliseconds (0-999)getMinutes()     Get the minutes (0-59)getMonth()     Get the month (0-11)getSeconds()     Get the seconds (0-59)getTime()     Get the time (milliseconds since January 1, 1970)USE IN THE HTML DOCUMENTwindow.alert();//write into the alert boxdocument.write();//write into the HTMLinnerHTML.// write into the documents html partconsole.log()//write into the console"
}, 

{
"id": "-2016-09-04-jekyll",
"title": "Jekyll Site Generator",
"author": "Anshuman",
"tags": ["Jekyll"],
"url": "/2016/09/04/jekyll/",
"date": "2016-09-04",
"content": "Jekyll static platform generatorJekyll is a ruby based static site genarator .Now Jekyll is a part ofgithub pages.Its a blog aware platform and many templates are freely availablefor rapid deployment of jekyll sites."
}

]
